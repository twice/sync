snippet defmm "def method_missing"
def method_missing(meth, *args, &blk)
	${1}
end
endsnippet

snippet defs "def class method"
def self.${1:class_method_name}
	${2}
end
endsnippet

snippet ua "update_attribute" !w
update_attribute(:${1:attr}, ${2:value})
endsnippet

snippet uas "update_attributes" !w
update_attributes(params[:${1:model}])
endsnippet

snippet fla "flash[:object]"
flash[:${1:success}] = "${2:message}"
endsnippet

snippet flash "flash[:object]"
flash[:${1:success}] = "${2:message}"
endsnippet

snippet par "params hash object" !iw
params[:${1:model}]
endsnippet

snippet pari "params id object" !iw
params[:id]
endsnippet

snippet parfk "params foreign key" !iw
params[:${model}_id]
endsnippet

snippet redp "redirect_to path" !
redirect_to ${1:some}_path
endsnippet

snippet rednp "redirect_to nested path" !
redirect_to [${1:parent}, ${2:child}]
endsnippet

snippet reda "redirect_to with :alert" !
redirect_to @${1:model}, :alert => ${2:"message"}
endsnippet

snippet redf "redirect_to with :flash" !
redirect_to @${1:model}, :flash => { ${2::success}  => ${3:"message"}}
endsnippet

snippet redn "redirect_to with :notice" !b
redirect_to @${1:model}, :notice => ${2:"message"}
endsnippet

snippet bfo "before_filter :only" !b
before_filter :${1:method}, only: [:show, :edit, :update,:destroy]
endsnippet

snippet bfe "before_filter :except" !b
before_filter :${1:method}, except: [:create, :index]
endsnippet

snippet bt "belongs_to" !
belongs_to :${1:association}
endsnippet

snippet btc "belongs_to class_name" !
belongs_to :${1:association}, class_name: ${0:class_name}
endsnippet

snippet btp "belongs_to polymorphic" !
belongs_to :${1:association}, polymorphic: true$0
endsnippet

snippet hm "has_many" !
has_many :${1:objects}
endsnippet

snippet hmd "has_many dependent destroy" !
has_many :${1:objects}, :dependent => :destroy$0
endsnippet

snippet hmt "has_many :through" !
has_many :${1:objects}, :through => :${0:association}
endsnippet
snippet va "validates acceptance" !
validates :${1:terms}, :acceptance => true
endsnippet

snippet vc "validates confirmation" !
validates :${1:attribute}, :confirmation => true
endsnippet

snippet ve "validates exclusion" !
validates :${1:attribute}, :exclusion => { :in => ${2:%w( mov avi )} }
endsnippet

snippet vf "validates format" !
validates :${1:attribute}, :format => { :with => /${2:regex}/ }
endsnippet

snippet vi
validates :${1:attribute}, :inclusion => { :in => %w(${2: mov avi }) }
endsnippet

snippet vl "validates length" !
validates :${1:attribute}, :length => { :in => ${2:3}..${3:20} }
endsnippet

snippet vn "validates numericality" !
validates :${1:attribute}, :numericality => true
endsnippet

snippet vp "validates presence" !
validates :${1:attribute}, :presence => true
endsnippet

snippet vu "validate uniqueness" !
validates :${1:attribute}, :uniqueness => true
endsnippet
